/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ADMIN_VIEW;

import CLIENT_VIEW.CLASS_PANES;
import java.awt.Color;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;

public class Announcement extends javax.swing.JPanel {

    private CLIENT_VIEW.Frame frame;

    private final String url = "jdbc:mysql://localhost:3306/tbaqs";
    private final String user = "root";
    private final String pass = "";

    public Announcement(CLIENT_VIEW.Frame frame) {
        initComponents();
        this.frame = frame;
        messagebox.setLineWrap(true);
        messagebox.setWrapStyleWord(true);
        
      
        email.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        BACK = new javax.swing.JButton();
        email = new javax.swing.JTextField();
        sendto = new javax.swing.JComboBox<>();
        type = new javax.swing.JComboBox<>();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagebox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setOpaque(false);
        setLayout(null);

        BACK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG'S/BUTTONS/HU.png"))); // NOI18N
        BACK.setBorderPainted(false);
        BACK.setContentAreaFilled(false);
        BACK.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG'S/BUTTONS/HC.png"))); // NOI18N
        BACK.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG'S/BUTTONS/HC.png"))); // NOI18N
        BACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BACKActionPerformed(evt);
            }
        });
        add(BACK);
        BACK.setBounds(23, 175, 57, 57);

        email.setBackground(new java.awt.Color(255, 255, 153));
        email.setFont(new java.awt.Font("Nirmala UI", 0, 13)); // NOI18N
        email.setForeground(new Color(0x041a46));
        email.setToolTipText("");
        email.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0x041a46)));
        email.setDoubleBuffered(true);
        email.setOpaque(true);
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        add(email);
        email.setBounds(310, 300, 340, 24);

        sendto.setBackground(new java.awt.Color(255, 255, 153));
        sendto.setFont(new java.awt.Font("Nirmala UI", 0, 13)); // NOI18N
        sendto.setForeground(new Color(0x041a46));
        sendto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Custom" }));
        sendto.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0x041a46), 3));
        sendto.setDoubleBuffered(true);
        sendto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendtoActionPerformed(evt);
            }
        });
        add(sendto);
        sendto.setBounds(160, 300, 150, 24);

        type.setBackground(new java.awt.Color(255, 255, 153));
        type.setFont(new java.awt.Font("Nirmala UI", 0, 13)); // NOI18N
        type.setForeground(new Color(0x041a46));
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Info", "Warning", "Danger" }));
        type.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0x041a46), 3));
        type.setDoubleBuffered(true);
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });
        add(type);
        type.setBounds(700, 300, 470, 24);

        send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BUTTON IMAGES/FINAL BANK QUEUE (23).png"))); // NOI18N
        send.setBorderPainted(false);
        send.setContentAreaFilled(false);
        send.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/BUTTON IMAGES/FINAL BANK QUEUE (22).png"))); // NOI18N
        send.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/BUTTON IMAGES/FINAL BANK QUEUE (22).png"))); // NOI18N
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });
        add(send);
        send.setBounds(1056, 532, 103, 31);

        jScrollPane1.setBackground(null);
        jScrollPane1.setBorder(null);
        jScrollPane1.setDoubleBuffered(true);

        messagebox.setBackground(null);
        messagebox.setColumns(20);
        messagebox.setFont(new java.awt.Font("Nirmala UI", 0, 14)); // NOI18N
        messagebox.setRows(5);
        messagebox.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0x041a46)));
        jScrollPane1.setViewportView(messagebox);

        add(jScrollPane1);
        jScrollPane1.setBounds(140, 340, 1020, 190);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PANEL IMAGES/AD_CA.gif"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1300, 700);
    }// </editor-fold>//GEN-END:initComponents

    private void BACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BACKActionPerformed
        frame.setContentPane(new Dashboard(frame));
        frame.revalidate();
    }//GEN-LAST:event_BACKActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void sendtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendtoActionPerformed
        if (sendto.getSelectedIndex() == 0) {
            email.setVisible(false);
            email.setText(null);
        } else if (sendto.getSelectedIndex() == 1) {
            email.setVisible(true);
        }
    }//GEN-LAST:event_sendtoActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed

        
        String text = messagebox.getText().toString().trim();
        String mail;
        if(!messagebox.getText().equals(null)){
        if (sendto.getSelectedIndex() == 0) {
            mail = "All";
            int choice = CLASS_PANES.showConfirmBox("Are you sure you want to send a message to all?");

            if (choice == JOptionPane.YES_OPTION) {
                String notifSql = "INSERT INTO notifications (Username, title, message, type, created_at) VALUES (?, ?, ?, ?, ?)";

                try (java.sql.Connection con = java.sql.DriverManager.getConnection(url, user, pass); java.sql.PreparedStatement psNotif = con.prepareStatement(notifSql)) {

                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    String DATETIME = LocalDateTime.now().format(formatter);

                    psNotif.setString(1, mail);
                    psNotif.setString(2, "Announcement");
                    psNotif.setString(3, text);
                    psNotif.setString(4, type.getSelectedItem().toString());
                    psNotif.setString(5, DATETIME);
                    int rowsAffected = psNotif.executeUpdate();
                    
                    CLASS_PANES.showMessageBox("The message has been sent to all acccount holders.");
                    sendto.setSelectedIndex(0);
                    messagebox.setText(null);
                    type.setSelectedIndex(0);
                    
                     frame.setContentPane(new Dashboard(frame));
                     frame.revalidate();
                } catch (java.sql.SQLException lol) {
                    lol.printStackTrace();
                    CLASS_PANES.showMessageBox("‚ùå Notification insert failed: " + lol.getMessage());
                }

            } else if (choice == JOptionPane.NO_OPTION) {

            }

        }

        if (sendto.getSelectedIndex() == 1) {
    mail = email.getText().trim();

    if (!mail.isEmpty()) {
        String getusername = "SELECT Username FROM new_registered_user WHERE Email = ?";
        String notifSql = "INSERT INTO notifications (Username, title, message, type, created_at) VALUES (?, ?, ?, ?, ?)";

        int choice = CLASS_PANES.showConfirmBox("Are you sure you want to send a message to this account holder?");
        if (choice == JOptionPane.YES_OPTION) {
            try (java.sql.Connection con = java.sql.DriverManager.getConnection(url, user, pass);
                 java.sql.PreparedStatement psget = con.prepareStatement(getusername)) {

                psget.setString(1, mail);

                try (java.sql.ResultSet rs = psget.executeQuery()) {
                    if (rs.next()) {
                        String usernames = rs.getString("Username");
                        System.out.print("------------------------------------------------------------------------------------");
                   
                        try (java.sql.Connection con2 = java.sql.DriverManager.getConnection(url, user, pass);
                             java.sql.PreparedStatement psNotif = con2.prepareStatement(notifSql)) {

                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                            String DATETIME = LocalDateTime.now().format(formatter);

                            psNotif.setString(1, usernames);
                            psNotif.setString(2, "Announcement");
                            psNotif.setString(3, text);
                            psNotif.setString(4, type.getSelectedItem().toString());
                            psNotif.setString(5, DATETIME);

                            int rowsAffected = psNotif.executeUpdate();
                            CLASS_PANES.showMessageBox("The message has been sent to " + usernames + ".");
                            
                            // Reset UI
                            sendto.setSelectedIndex(0);
                            messagebox.setText(null);
                            type.setSelectedIndex(0);
                            frame.setContentPane(new Dashboard(frame));
                            frame.revalidate();
                        }
                    } else {
                        CLASS_PANES.showMessageBox("No account found with that email.");
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                CLASS_PANES.showMessageBox("Error: " + e.getMessage());
            }
        }
    } else {
        CLASS_PANES.showMessageBox("Email cannot be empty.");
    }
}}else{
        
        CLASS_PANES.showMessageBox("Message Box can not be empty.");}
    }//GEN-LAST:event_sendActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BACK;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messagebox;
    private javax.swing.JButton send;
    private javax.swing.JComboBox<String> sendto;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
